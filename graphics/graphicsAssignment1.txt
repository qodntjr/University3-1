과제 : Snake 게임의 이해 및 변형
<기존 코드>
//Delcare Global Variables
var s;
var scl = 20;
var food;
playfield = 600;

// p5js Setup function - required

function setup() {
  createCanvas(playfield, 640);
  background(51);
  s = new Snake();
  frameRate (10);
  pickLocation();
}

// p5js Draw function - required

function draw() {
  background(51);
  scoreboard();
  if (s.eat(food)) {
    pickLocation();
  }
  s.death();
  s.update();
  s.show();

  fill (255,0,100);
  rect(food.x,food.y, scl, scl);
}

// Pick a location for food to appear

function pickLocation() {
  var cols = floor(playfield/scl);
  var rows = floor(playfield/scl);
  food = createVector(floor(random(cols)), floor(random(rows)));
  food.mult(scl);

  // Check the food isn't appearing inside the tail

  for (var i = 0; i < s.tail.length; i++) {
    var pos = s.tail[i];
    var d = dist(food.x, food.y, pos.x, pos.y);
    if (d < 1) {
      pickLocation();
    }
  }
}

// scoreboard

function scoreboard() {
  fill(0);
  rect(0, 600, 600, 40);
  fill(255);
  textFont("Georgia");
  textSize(18);
  text("Score: ", 10, 625);
  text("Highscore: ", 450, 625)
  text(s.score, 70, 625);
  text(s.highscore, 540, 625)
}

// CONTROLS function

function keyPressed() {
  if (keyCode === UP_ARROW){
      s.dir(0, -1);
  }else if (keyCode === DOWN_ARROW) {
      s.dir(0, 1);
  }else if (keyCode === RIGHT_ARROW) {
      s.dir (1, 0);
  }else if (keyCode === LEFT_ARROW) {
      s.dir (-1, 0);
  }
}

// SNAKE OBJECT

function Snake() {
  this.x =0;
  this.y =0;
  this.xspeed = 1;
  this.yspeed = 0;
  this.total = 0;
  this.tail = [];
  this.score = 1;
  this.highscore = 1;

  this.dir = function(x,y) {
    this.xspeed = x;
    this.yspeed = y;
  }

  this.eat = function(pos) {
    var d = dist(this.x, this.y, pos.x, pos.y);
    if (d < 1) {
      this.total++;
      this.score++;
      text(this.score, 70, 625);
      if (this.score > this.highscore) {
        this.highscore = this.score;
      }
      text(this.highscore, 540, 625);
      return true;
    } else {
      return false;
    }
  }

  this.death = function() {
    for (var i = 0; i < this.tail.length; i++) {
      var pos = this.tail[i];
      var d = dist(this.x, this.y, pos.x, pos.y);
      if (d < 1) {
        this.total = 0;
        this.score = 0;
        this.tail = [];
      }
    }
  }

  this.update = function(){
    if (this.total === this.tail.length) {
      for (var i = 0; i < this.tail.length-1; i++) {
        this.tail[i] = this.tail[i+1];
    }

    }
    this.tail[this.total-1] = createVector(this.x, this.y);

    this.x = this.x + this.xspeed*scl;
    this.y = this.y + this.yspeed*scl;

    this.x = constrain(this.x, 0, playfield-scl);
    this.y = constrain(this.y, 0, playfield-scl);


  }
  this.show = function(){
    fill(255);
    for (var i = 0; i < this.tail.length; i++) {
        rect(this.tail[i].x, this.tail[i].y, scl, scl);
    }

    rect(this.x, this.y, scl, scl);
  }
}
--------------------------------------------------------------------------
<추가한 코드>
//Delcare Global Variables
var s;
var scl = 20;
var food;
var enemyMoveTempX;
var enemyMoveTempY;
var enemyMoveValueX;
var enemyMoveValueY;
var enemyLength = 6;
var playfield = 600;
let mode = 0;
let menu;
let gameover;
const MODE_MENU = 0;
const MODE_IN_GAME = 1;
const MODE_GAMEOVER = 2;

function preload() {				//이미지를 연결해준다
  menu = loadImage('menu.jpg');
  gameover = loadImage('gameover.jpg');
}

// p5js Setup function - required

function setup() {
  createCanvas(playfield, 640);
  background(51);
  s = new Snake();
  enemy = new Snake();
  enemyPreset();
  frameRate (10);
  pickLocation();
}

// p5js Draw function - required

function draw() {
  if (mode == MODE_MENU) {			//메뉴
    drawMenu();
  }
  if (mode == MODE_IN_GAME) {			//인게임
    drawGame();
  }
  if (mode == MODE_GAMEOVER) {			//게임오버
    drawGameover();
  }
}

function drawMenu() {
  image(menu, 0, 0, 600, 640);			//메뉴 이미지
}

function drawGameover() {
  image(gameover, 0, 0, 600, 640);			//게임오버 이미지
}

function drawGame() {
  background(51);
  scoreboard();
  if (s.eat(food)) {
    pickLocation();
  }
  if (frameCount%2==0) {				//2프레임 간격으로 실행
    enemyDir();					//적의 방향을 정해준다
  } else {
    if (enemyDirLimit()) {				//적의 방향이 제한된 곳으로 이동할 때
      enemyDir();
    }
  }
  if (enemy.total < enemyLength) {			//적의 꼬리길이 만큼 몸을 늘린다.
    enemy.total++;
  }

  s.death(enemy);
  s.update();
  enemy.update();
  s.show();
  enemy.show();

  fill (255, 0, 100);
  rect(food.x, food.y, scl, scl);
  noFill();
}

function enemyPreset() {				//적 세팅
  enemy.x = 14*scl;					//x 15번째 칸
  enemy.y = 14*scl;				//y 15번째 칸
  enemy.col = createVector(255, 0, 0);			//색깔
  enemy.lineCol = createVector(0, 127, 0);		//줄무늬색깔(원래 색깔과 차이)
}

function enemyDir() {
  do {						//적의 방향을 정해준다 방향은 (+-1,0) 또는 (0,+-1)로 해준다.
    enemyMoveTempX = round(random(-1, 1));
    enemyMoveTempY = abs(abs(enemyMoveTempX)-1)*((floor(random(-1, 1))+0.5)*2);
    enemy.dir(enemyMoveTempX, enemyMoveTempY);
  } while (enemyDirLimit());				//적의 방향이 제한된 곳으로 이동하면 다시한다
  enemyMoveValueX = enemyMoveTempX;		//실제로 움직인 x값 저장
  enemyMoveValueY = enemyMoveTempY;		//실제로 움직인 y값 저장
}

function enemyDirLimit() {				//적의 방향 제한
  if ((enemyMoveTempX != 0 && enemyMoveValueX == -enemyMoveTempX) ||	//진행방향 x축에서 정반대로 움직일 때 (머리가 꼬리에 겹침)
    (enemyMoveTempX == 0 && enemyMoveValueY == -enemyMoveTempY)) {	//진행방향 y축에서 정반대로 움직일 때 (머리가 꼬리에 겹침)
    return true;
  }
  if (enemy.x+enemyMoveTempX*scl<0 || enemy.x+enemyMoveTempX*scl > playfield-scl  ||	//x값이 맵 밖으로 나갈 때
    enemy.y+enemyMoveTempY*scl<0 || enemy.y+enemyMoveTempY*scl > playfield-scl) {	//y값이 맵 밖으로 나갈 때
    return true;
  }
  for (var i = 0; i < enemy.tail.length; i++) {		//적의 모든 꼬리 비교
    var posEnemy = enemy.tail[i];
    var d = dist(enemy.x + enemyMoveTempX*scl, enemy.y + enemyMoveTempY*scl, posEnemy.x, posEnemy.y);
    if ( d < 1) {					//적의 머리와 각 꼬리 중 하나가 만날 때
      return true;
    }
  }
  return false;
}

// Pick a location for food to appear

function pickLocation() {
  var cols = floor(playfield/scl);
  var rows = floor(playfield/scl);
  food = createVector(floor(random(cols)), floor(random(rows)));
  food.mult(scl);

  // Check the food isn't appearing inside the tail

  for (var i = 0; i < s.tail.length; i++) {
    var pos = s.tail[i];
    var d = dist(food.x, food.y, pos.x, pos.y);
    if (d < 1) {
      pickLocation();
    }
  }
}

// scoreboard

function scoreboard() {
  fill(0);
  rect(0, 600, 600, 40);
  fill(255);
  textFont("Georgia");
  textSize(18);
  text("Score: ", 10, 625);
  text("Highscore: ", 450, 625);
  text(s.score, 70, 625);
  text(s.highscore, 540, 625);
  noFill();
}

// CONTROLS function

function keyPressed() {
  if (keyCode === UP_ARROW) {
    s.dir(0, -1);
  } else if (keyCode === DOWN_ARROW) {
    s.dir(0, 1);
  } else if (keyCode === RIGHT_ARROW) {
    s.dir (1, 0);
  } else if (keyCode === LEFT_ARROW) {
    s.dir (-1, 0);
  }
  if (keyCode === ENTER || key === 'r' || key === 'R') {		//엔터, r, R을 입력할 때
    s.reset();						//s 리셋
    enemy.reset();						//enemy 리셋
    enemyPreset();						//enemy 프리셋 적용
    mode = MODE_IN_GAME;					//모드는 인게임(const 1)
  }
  if ( key === 'm' || key === 'M') {				//m, M을 입력 할 때
    mode = MODE_MENU;					//모드는 메뉴(const 0)
  }
}

// SNAKE OBJECT

function Snake() {
  this.x =3*scl;				//4번째 칸
  this.y =3*scl;				//4번째 칸
  this.xspeed = 0;
  this.yspeed = 0;
  this.total = 0;
  this.tail = [];
  this.score = 0;
  this.highscore = 0;
  this.col = createVector(255, 255, 0);		//색깔
  this.lineCol = createVector(0, -127, 0);	//줄무늬 색깔(원래 색깔과 차이)

  this.dir = function(x, y) {
    this.xspeed = x;
    this.yspeed = y;
  }

  this.reset = function() {		//생성자 값으로 변경
    this.x = 3*scl;
    this.y = 3*scl;
    this.xspeed = 0;
    this.yspeed = 0;
    this.total = 0;
    this.tail = [];
    this.score = 0;
  }

  this.eat = function(pos) {
    var d = dist(this.x, this.y, pos.x, pos.y);
    if (d < 1) {
      this.total++;
      this.score++;
      text(this.score, 70, 625);
      if (this.score > this.highscore) {
        this.highscore = this.score;
      }
      text(this.highscore, 540, 625);
      return true;
    } else {
      return false;
    }
  }

  this.death = function(enemy) {
    var d;
    var d2;
    if (this.x + this.xspeed*scl < 0 || this.x + this.xspeed*scl>playfield-scl ||	//x값이 맵밖으로 나갈때
      this.y + this.yspeed*scl < 0 || this.y + this.yspeed*scl>playfield-scl) {	//y값이 맵밖으로 나갈때
      this.reset();
      enemy.reset();
      enemyPreset();
      mode = MODE_GAMEOVER;
    }
    for (var i = 0; i < this.tail.length; i++) {		//모든 꼬리 비교
      var pos = this.tail[i];
      d = dist(this.x, this.y, pos.x, pos.y);
      d2 = dist(enemy.x, enemy.y, pos.x, pos.y);
      if (d < 1 || d2 < 1) {	//자신 머리와 자신의 꼬리가 만날 때, 적의 머리와 자신의 꼬리가 만날 때
        this.reset();
        enemy.reset();
        enemyPreset();
        mode = MODE_GAMEOVER;
      }
    }
    d = dist(this.x, this.y, enemy.x, enemy.y);
    if ( d < 1) {		//자신의 머리와 적의 머리가 만날 때
      this.reset();
      enemy.reset();
      enemyPreset();
      mode = MODE_GAMEOVER;
    }
    for (var j=0; j<enemy.tail.length; j++) {
      var enemyPos = enemy.tail[j];
      d = dist(this.x, this.y, enemyPos.x, enemyPos.y);
      if ( d < 1) {		//자신의 머리와 적의 꼬리가 만날 때
        this.reset();
        enemy.reset();
        enemyPreset();
        mode = MODE_GAMEOVER;
      }
    }
  }

  this.update = function() {
    if (this.total === this.tail.length) {
      for (var i = 0; i < this.tail.length-1; i++) {
        this.tail[i] = this.tail[i+1];
      }
    }
    this.tail[this.total-1] = createVector(this.x, this.y);

    this.x = this.x + this.xspeed*scl;
    this.y = this.y + this.yspeed*scl;

    this.x = constrain(this.x, 0, playfield-scl);
    this.y = constrain(this.y, 0, playfield-scl);
  }

  this.show = function() {
    for (var i = 0; i < this.tail.length; i++) {
      fill(this.col.x, this.col.y+i%3/2*this.lineCol.y, this.col.z);
      rect(this.tail[i].x, this.tail[i].y, scl, scl);
    }
    fill(this.col.x, this.col.y, this.col.z);
    rect(this.x, this.y, scl, scl);
  }
}

/*
추가 내용

①메뉴(m or M), 인게임(r or R or ENTER), 게임오버 분류

②적 프리셋 
1. x 15번째 칸
2. y 15번째 칸
3. 빨간색
4. 주황 줄무늬

③적의 방향 지정 (1,0) or (-1,0) or (0,1) or (0,-1)

④적 방향 제한
1. x값이 맵 밖으로 나갈 때
2. y값이 맵 밖으로 나갈 때
3. 진행방향 x축에서 정반대로 움직일 때 (머리가 꼬리에 겹침)
4. 진행방향 y축에서 정반대로 움직일 때 (머리가 꼬리에 겹침)
5. 적의 머리와 적의 꼬리 중 하나가 만날 때

⑤자신이 죽는 경우
1. x값이 맵밖으로 나갈때
2. y값이 맵밖으로 나갈때
3. 자신 머리와 자신의 꼬리가 만날 때, 적의 머리와 자신의 꼬리가 만날 때
4. 자신의 머리와 적의 머리가 만날 때
5. 자신의 머리와 적의 꼬리가 만날 때
*/